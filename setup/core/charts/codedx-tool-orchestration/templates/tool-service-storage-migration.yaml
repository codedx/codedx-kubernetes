{{- if .Values.minio.enabled -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "codedx-tool-orchestration.migrate-data-job" . | quote }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "codedx-tool-orchestration.commonLabels" . | nindent 4 }}
    component: hook
  annotations:
    "helm.sh/hook": post-upgrade
spec:
  template:
    metadata:
      labels:
        {{- include "codedx-tool-orchestration.commonLabels" . | nindent 8 }}
        component: hook
    spec:
      {{- if .Values.toolServiceImagePullSecrets }}
      imagePullSecrets:
      {{- toYaml .Values.toolServiceImagePullSecrets | nindent 6 }}
      {{- end }}
      serviceAccountName: {{ include "codedx-tool-orchestration.serviceAccountName" . | quote }}
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      {{- if .Values.nodeSelectors }}
      nodeSelector:
      {{- toYaml .Values.nodeSelectors | trim | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
      {{- toYaml .Values.tolerations | trim | nindent 8 }}
      {{- end }}
      restartPolicy: Never
      initContainers:
      - name: "wait-for-storage"
        image: "bash"
        command: ["bash", "-c", "for i in {1..60}; do if (timeout 2 bash -c \"</dev/tcp/{{- print (include "minio.ref.fullname" .) "." .Release.Namespace ".svc.cluster.local/" .Values.minio.service.port -}}\" echo $?); then echo 'Successfully connected to MinIO port'; exit 0; else echo 'Retrying MinIO connection...'; sleep 2; fi; done; echo 'MinIO is unavailable'; exit 1"]
      containers:
      - name: migrate-storage-one-bucket-strategy
        image: "{{ required "toolServiceImageName is required" .Values.toolServiceImageName }}"
        command: ["/opt/codedx/service/bin/migrate"]
        args: [
          "-workDirectory", "/opt/codedx/service/tmp",
          "-fromEndpoint", {{ include "codedx-tool-orchestration.storageEndpoint" . }},
          "-fromUsernamePath", "/opt/codedx/cleanup/secrets/storageUsername",
          "-fromPasswordPath", "/opt/codedx/cleanup/secrets/storagePassword",
          "-toBucket", "code-dx-storage",
          "-toEndpoint", {{ include "codedx-tool-orchestration.storageEndpoint" . }},
          "-toUsernamePath", "/opt/codedx/cleanup/secrets/storageUsername",
          "-toPasswordPath", "/opt/codedx/cleanup/secrets/storagePassword",
          {{- if .Values.toolServiceTls.secret }}
          "-toTlsEnabled",
          "-fromTlsEnabled",
          {{- end }}
          {{- if .Values.workflowStorage.configMapName }}
          "-fromTLSCertToTrustPath", "/etc/ssl/certs/cdx-minio.pem",
          "-toTLSCertToTrustPath", "/etc/ssl/certs/cdx-minio.pem",
          {{- end }}]
        volumeMounts:
        - name: storage-secret-volume
          mountPath: "/opt/codedx/cleanup/secrets/storageUsername"
          readOnly: true
          subPath: storageUsername
        - name: storage-secret-volume
          mountPath: "/opt/codedx/cleanup/secrets/storagePassword"
          readOnly: true
          subPath: storagePassword
        {{- if .Values.workflowStorage.configMapName }}
        - name: storage-cert-volume
          mountPath: /etc/ssl/certs/cdx-minio.pem
          subPath: cdx-minio.pem
          readOnly: true
        {{- end }}
      volumes:
      - name: storage-secret-volume
        secret:
          secretName: {{ .Values.minio.global.minio.existingSecret | quote }}
          items:
          - key: access-key
            path: storageUsername
          - key: secret-key
            path: storagePassword
      {{- if .Values.workflowStorage.configMapName }}
      - name: storage-cert-volume
        configMap:
          name: {{ .Values.workflowStorage.configMapName }}
          items:
            - key: {{ .Values.workflowStorage.configMapPublicCertKeyName }}
              path: cdx-minio.pem
      {{- end }}
{{ end -}}