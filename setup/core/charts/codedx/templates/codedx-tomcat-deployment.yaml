apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "codedx.fullname" . | quote }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "codedx.commonLabels" . | nindent 4 }}
spec:
  # Code Dx does not officially support more than one instance running against the 
  # same MariaDB server - doing so will lead to errors in the web interface. More
  # than one Code Dx instance running during an installation or database schema
  # upgrade *is very likely to corrupt your database!*
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: {{ include "codedx.name" . | quote }}
      release: {{ .Release.Name | quote }}
      component: frontend
  template:
    metadata:
      labels:
        {{- include "codedx.commonLabels" . | nindent 8 }}
        component: frontend
      {{- if .Values.podAnnotations }}
      annotations:
      {{- toYaml .Values.podAnnotations | trim | nindent 8 }}
      {{- end }}
    spec:
      {{- if .Values.codedxTomcatImagePullSecrets }}
      imagePullSecrets:
      {{- toYaml .Values.codedxTomcatImagePullSecrets | nindent 6 }}
      {{- end }}
      serviceAccountName: {{ include "codedx.serviceAccountName" . | quote }}
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      {{- if .Values.nodeSelectors }}
      nodeSelector:
      {{- toYaml .Values.nodeSelectors | trim | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
      {{- toYaml .Values.tolerations | trim | nindent 8 }}
      {{- end }}
      containers:
      - env:
        - name: SUPERUSER_NAME
          value: "admin"
        - name: SUPERUSER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.existingSecret | quote }}
              key: admin-password
        - name: KEYSTORE_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Values.existingSecret | quote }}
              key: 'cacerts-new-password'
        image: {{ required "A tomcat image must be provided! Assign codedxTomcatImage!" .Values.codedxTomcatImage | quote }}
        imagePullPolicy: {{ default "IfNotPresent" .Values.codedxTomcatImagePullPolicy | quote }}
        name: "{{ include "codedx.name" . }}"
        readinessProbe:
          httpGet:
            path: /codedx/login?local
            {{- if .Values.codedxTls.componentEnabled }}
            scheme: HTTPS
            port: 8443
            {{- else }}
            port: 8080
            {{- end }}
          initialDelaySeconds: 10
          periodSeconds: 3
        livenessProbe:
          httpGet:
            path: /codedx/login?local
            {{- if .Values.codedxTls.componentEnabled }}
            scheme: HTTPS
            port: 8443
            {{- else }}
            port: 8080
            {{- end }}
          initialDelaySeconds: 600
          periodSeconds: 15
          timeoutSeconds: 10
        command: ["start.sh"]
        args: {{ include "codedx.props.params.separated" . | nindent 8 }}
        ports:
        - containerPort: 8080
        resources:
        {{- toYaml .Values.resources | trim | nindent 10 }}
        volumeMounts:
        # Code Dx appdata
        - mountPath: /opt/codedx
          name: 'codedx-appdata'
        # MariaDB props
        - mountPath: {{ include "codedx.mariadb.props.path" . | quote }}
          name: codedx-mariadb-props
          subPath: {{ include "codedx.mariadb.props.name" . | quote }}
        # Main Code Dx config
        - mountPath: /opt/codedx/codedx.props
          name: codedx-props
          subPath: codedx.props
        # Any extra config files from codedx.props.extra
        {{ range .Values.codedxProps.extra -}}
        - mountPath: "/opt/codedx/{{ .key }}"
          name: "codedx-extra-props-{{ .key }}"
          subPath: {{ .key | quote }}
        {{ end }}
        {{ range .Values.codedxProps.internalExtra -}}
        - mountPath: "/opt/codedx/{{ .key }}"
          name: "codedx-internal-extra-props-{{ .key }}"
          subPath: {{ .key | quote }}
        {{ end }}
        # Command args to have Code Dx load extra props files
        - mountPath: /usr/local/tomcat/bin/setenv.sh
          name: codedx-props-env
          subPath: setenv.sh
        {{ if .Values.licenseSecret -}}
        - mountPath: /opt/codedx/license.lic
          name: codedx-license
          subPath: license.lic
        {{- end }}
        {{ if .Values.cacertsSecret -}}
        - mountPath: /opt/java/openjdk/jre/lib/security/cacerts
          name: codedx-cacerts
          subPath: cacerts
        {{- end }}
        - mountPath: /opt/codedx/logback.xml
          name: codedx-logback
          subPath: logback.xml
        {{ if and .Values.authentication.saml.samlIdpXmlFileConfigMap .Values.authentication.saml.samlSecret -}}
        - mountPath: /opt/codedx/saml-idp.xml
          name: codedx-saml-idp
          subPath: saml-idp.xml
        - mountPath: /opt/codedx/codedx-saml.props
          name: codedx-saml-props
          subPath: codedx-saml.props
        - mountPath: /opt/codedx/codedx-saml-keystore.props
          name: codedx-saml-keystore-props
          subPath: codedx-saml-keystore.props
        {{- end }}
        - mountPath: /opt/codedx/codedx-ml.props
          name: codedx-ml-props
          subPath: codedx-ml.props
        {{ if .Values.extraMounts -}}
        {{ range .Values.extraMounts -}}
        - name: {{ .name }}
        {{- .mount | toYaml | nindent 10 -}}
        {{- end }}
        {{- end }}
        {{ if .Values.codedxTls.componentEnabled -}}
        - mountPath: /usr/local/tomcat/conf/server.xml
          name: codedx-server-xml
          subPath: server.xml
        - mountPath: /usr/local/tomcat/conf/ssl.crt
          name: codedx-tls
          subPath: ssl.crt
        - mountPath: /usr/local/tomcat/conf/ssl.key
          name: codedx-tls
          subPath: ssl.key
        {{- end }}
      initContainers:
        - name: {{ include "dbinit.fullname" . | quote }}
          image: {{ required "A tomcat init image must be provided! Assign codedxTomcatInitImage!" .Values.codedxTomcatInitImage | quote }}
      {{- if .Values.mariadb.enabled }}
          command: ["bash", "-c", "for i in {1..60}; do if (timeout 2 bash -c \"</dev/tcp/{{ .Release.Name }}-mariadb/3306\" echo $?); then echo 'Successfully connected to MariaDB port'; exit 0; else echo 'Retrying database connection...'; sleep 2; fi; done; echo 'MariaDB is unavailable'; exit 1"]
      {{ else }}
          command: ["bash", "-c", "url='{{ .Values.codedxProps.dbconnection.externalDbUrl }}' && pat='^jdbc:mysql://([^/]+)/.+$' && [[ $url =~ $pat ]] && host=${BASH_REMATCH[1]} && for i in {1..60}; do if (timeout 2 bash -c </dev/tcp/$host/3306 echo $?); then echo 'Successfully connected to MariaDB port'; exit 0; else echo 'Retrying database connection...'; sleep 2; fi; done; echo 'MariaDB is unavailable'; exit 1"]
      {{ end -}}
      priorityClassName: {{ include "codedx.priorityClassName" . | quote }}
      restartPolicy: Always
      volumes:
      - name: 'codedx-appdata'
        persistentVolumeClaim:
          claimName: {{ include "volume.fullname" . | quote }}
      - name: codedx-props
        configMap:
          name: {{ include "codedx.props.configMapName" . | quote }}
          items:
          - key: codedx.props
            path: codedx.props
      - name: codedx-props-env
        configMap:
          name: {{ include "codedx.props.configMapName" . | quote }}
          items:
          - key: tomcat.env
            path: setenv.sh
      - name: codedx-mariadb-props
        secret:
          secretName: {{ .Values.databaseConnectionSecret | quote }}
          items:
          - key: codedx.mariadb.props
            path: {{ include "codedx.mariadb.props.name" . | quote }}
      {{- range .Values.codedxProps.extra }}
      - name: "codedx-extra-props-{{ .key }}"
        {{- if eq (required "codedxProps.extra entries must have a 'type' defined!" .type) "secret" }}
        secret:
          secretName: {{ .name | quote }}
          items:
          - key: {{ .key | quote }}
            path: {{ .key | quote }}
        {{- else if eq .type "values" }}
        configMap:
          name: {{ include "codedx.props.configMapName" $ | quote }}
          items:
          - key: {{ .key | quote }}
            path: {{ .key | quote }}
        {{- end -}}
      {{- end }}
      {{- range .Values.codedxProps.internalExtra }}
      - name: "codedx-internal-extra-props-{{ .key }}"
        {{- if eq (required "codedxProps.internalExtra entries must have a 'type' defined!" .type) "secret" }}
        secret:
          secretName: {{ .name | quote }}
          items:
          - key: {{ .key | quote }}
            path: {{ .key | quote }}
        {{- else if eq .type "values" }}
        configMap:
          name: {{ include "codedx.props.configMapName" $ | quote }}
          items:
          - key: {{ .key | quote }}
            path: {{ .key | quote }}
        {{- end -}}
      {{- end }}      
      {{ if .Values.licenseSecret -}}
      - name: codedx-license
        secret:
          secretName: {{ .Values.licenseSecret | quote }}
          items:
          - key: license.lic
            path: license.lic
      {{- end }}
      {{ if .Values.cacertsSecret -}}
      - name: codedx-cacerts
        secret:
          secretName: {{ .Values.cacertsSecret | quote }}
          items:
          - key: cacerts
            path: cacerts
      {{- end }}
      - name: codedx-logback
        configMap:
          name: {{ include "codedx.props.loggingConfigMapName" . | quote }}
          items:
          - key: logback.xml
            path: logback.xml
      {{ if and .Values.authentication.saml.samlIdpXmlFileConfigMap .Values.authentication.saml.samlSecret -}}
      - name: codedx-saml-idp
        configMap:
          name: {{ .Values.authentication.saml.samlIdpXmlFileConfigMap | quote }}
          items:
          - key: saml-idp.xml
            path: saml-idp.xml
      - name: codedx-saml-props
        configMap:
          name: {{ include "codedx.props.configMapName" . | quote }}
          items:
          - key: codedx-saml.props
            path: codedx-saml.props
      - name: codedx-saml-keystore-props
        secret:
          secretName: {{ .Values.authentication.saml.samlSecret | quote }}
          items:
          - key: codedx-saml-keystore.props
            path: codedx-saml-keystore.props
      {{- end }}
      - name: codedx-ml-props
        configMap:
          name: {{ include "codedx.props.configMapName" . | quote }}
          items:
          - key: codedx-ml.props
            path: codedx-ml.props      
      {{ if .Values.extraMounts -}}
      {{- range .Values.extraMounts -}}
      - name: {{ .name }}
      {{- .volume | toYaml | nindent 8 -}}
      {{- end }}
      {{- end }}
      {{ if .Values.codedxTls.componentEnabled -}}
      - name: codedx-server-xml
        configMap:
          name: {{ include "codedx.serverXmlName" . | quote }}
          items:
          - key: server.xml
            path: server.xml
      - name: codedx-tls
        secret:
          secretName: {{ .Values.codedxTls.secret }}
          items:
          - key: {{ .Values.codedxTls.certFile }}
            path: ssl.crt
          - key: {{ .Values.codedxTls.keyFile }}
            path: ssl.key
      {{- end -}}
