
nextVersion = ''
hasNextVersion = false
hasDockerChanges = false

def getRepo() {

	checkout([$class: 'GitSCM',
		branches: scm.branches,
		browser: scm.browser,
		doGenerateSubmoduleConfigurations: false,
		extensions: [
			[$class: 'RelativeTargetDirectory', relativeTargetDir: 'repo'],
			[$class: 'PruneStaleBranch'],
			[$class: 'CleanCheckout']
		],
		submoduleCfg: scm.submoduleCfg,
		userRemoteConfigs: scm.userRemoteConfigs
	]).GIT_COMMIT
}

def getLatestGitHubRelease(token, owner, repo) {

	def latestUrl = "https://api.github.com/repos/$owner/$repo/releases/latest"
	def output = sh(returnStdout: true, script: "curl --silent -H 'Accept: application/vnd.github.v3+json' -H 'Authorization: token $token' $latestUrl")
	echo output

	def tagNamePattern = /(?ms).*"tag_name":\s"(?<release>[^"]+)".*/
	def tagNameMatch = output =~ tagNamePattern

	def version = ''
	if (tagNameMatch.matches()) {
		version = tagNameMatch.group('release')
	}
	version
}

def slackSendMessage(success) {

	if (success) {
		slackSend color: 'good', message: "Code Dx Kubernetes: Release stage succeeded: <${env.BUILD_URL}console|Open>"
	} else {
		withCredentials([string(credentialsId: 'dockerSlackChannel', variable: 'slackChannel')]) {
			slackSend channel: slackChannel, color: 'warning', message: "Code Dx Kubernetes: Release stage failed: <${env.BUILD_URL}console|Open>"
		}
	}
}

pipeline {

	options {
		skipDefaultCheckout true // checkout via getRepo()
	}

	agent none

	stages {

		stage('Release') {

			agent {
				label 'codedx-release-build-small'
			}

			stages {

				stage('Checkout') {

					steps {

						script {
							currentBuild.displayName = getRepo()
						}
					}
				}

				stage('Test') {

					steps {

						dir ('repo/.version/test') {

							// note: the -CI parameter sets Run.Exit, but it also creates two files in the working directory
							sh 'pwsh -command "&{ Import-Module Pester; \\$cfg = [PesterConfiguration]::Default; \\$cfg.Run.Exit = \\$true; \\$cfg.Run.Path = \'./common.tests.ps1\';  Invoke-Pester -Configuration \\$cfg }"'
							sh 'pwsh -command "&{ Import-Module Pester; \\$cfg = [PesterConfiguration]::Default; \\$cfg.Run.Exit = \\$true; \\$cfg.Run.Path = \'./version.tests.ps1\'; Invoke-Pester -Configuration \\$cfg }"'
						}
					}
				}

				stage('Get Versions') {

					steps {

						dir ('repo') {

							withCredentials([
								usernamePassword(credentialsId: 'codedx-build-github', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_TOKEN'),
								string(credentialsId: 'codedxownername',            variable: 'GIT_OWNER'),
								string(credentialsId: 'codedxreponame',             variable: 'GIT_CODEDX_REPO'),								
								string(credentialsId: 'tomcatinitreponame',         variable: 'GIT_TOMCAT_INIT_REPO'),
								string(credentialsId: 'mariadbreponame',            variable: 'GIT_MARIADB_REPO'),
								string(credentialsId: 'toolorchestrationreponame',  variable: 'GIT_TOOL_ORCHESTRATION_REPO'),
								string(credentialsId: 'workflowreponame',           variable: 'GIT_WORKFLOW_REPO'),
								string(credentialsId: 'restoredbreponame',          variable: 'GIT_RESTOREDB_REPO')]) {

								script {

									outputPreview = release.runSemanticRelease(GIT_TOKEN, true)

									nextVersion = release.getNextVersion(outputPreview)
									hasNextVersion = nextVersion != ''

									currentVersions = []
									[GIT_CODEDX_REPO,GIT_TOMCAT_INIT_REPO,GIT_MARIADB_REPO,GIT_TOOL_ORCHESTRATION_REPO,GIT_WORKFLOW_REPO,GIT_RESTOREDB_REPO].each { x ->

										currentVersion = getLatestGitHubRelease(GIT_TOKEN, GIT_OWNER, x)
										if (currentVersion == '') {
											error("unable to continue because the latest version from repo $x cannot be found")
										}
										currentVersions += currentVersion
									}

									codeDxVersion             = currentVersions[0]
									codeDxTomcatInitVersion   = currentVersions[1]
									mariaDBVersion            = currentVersions[2]
									toolOrchestrationVersion  = currentVersions[3]
									workflowVersion           = currentVersions[4]
									restoreDBVersion          = currentVersions[5]

									def isCurrentVersion = sh(returnStdout: true, script: "pwsh -command \"&{ . ./.version/common.ps1; Test-CodeDxVersion './setup/core/setup.ps1' './admin/restore-db.ps1' '$codeDxVersion' '$codeDxTomcatInitVersion' '$mariaDBVersion' '$toolOrchestrationVersion' '$workflowVersion' '$restoreDBVersion' }\"")

									hasDockerChanges = !(isCurrentVersion.toBoolean())
									println("Next version is '$nextVersion' (hasNextVersion='$hasNextVersion' hasDockerChanges='$hasDockerChanges')")

									if (!hasNextVersion && !hasDockerChanges) {
										error("unable to continue because the repository is up to date with the latest versions; codeDxVersion=$codeDxVersion; codeDxTomcatInitVersion=$codeDxTomcatInitVersion; mariaDBVersion=$mariaDBVersion; toolOrchestrationVersion=$toolOrchestrationVersion; workflowVersion=$workflowVersion; restoreDBVersion=$restoreDBVersion")
									}
								}
							}
						}
					}
				}

				stage('Confirm') {

					steps {

						milestone ordinal: 1, label: 'Confirm'

						script {

							try {

								timeout(time: 15) {

									// pipeline not triggered by SCM and input response should occur with minimal delay, so invoke input in this stage (leaving container running)
									input message: "Continue with these versions? Code Dx: $codeDxVersion; Tomcat Init: $codeDxTomcatInitVersion; MariaDB: $mariaDBVersion; Tool Orchestration: $toolOrchestrationVersion; Workflow: $workflowVersion; RestoreDB: $restoreDBVersion"
								}
							} catch (err) {

								if (err instanceof org.jenkinsci.plugins.workflow.steps.FlowInterruptedException) {
									error('Timeout occurred while awaiting release confirmation')
								}
								error(err.toString())
							}
						}
					}
				}

				stage('Update Version') {

					steps {

						milestone ordinal: 2, label: 'Confirmed'

						dir ('repo') {

							sh 'git config user.name \'Code Dx Build\' && git config user.email support@codedx.com'
							sh "git checkout ${scm.branches[0]}"

							script {
								if (hasDockerChanges) {

									// note: this optionally applies minor version update to chart(s)
									// chart version(s) should be adjusted manually when hasNextVersion=true and hasDockerChanges=false
									sh "pwsh ./.version/version.ps1 '$codeDxVersion' '$codeDxTomcatInitVersion' '$mariaDBVersion' '$toolOrchestrationVersion' '$workflowVersion' '$restoreDBVersion'"
									sh 'git add .'
									sh "git commit -m 'feat: update to latest Docker image versions' -m 'Code Dx: $codeDxVersion' -m 'Tomcat Init: $codeDxTomcatInitVersion' -m 'MariaDB: $mariaDBVersion' -m 'Tool Orchestration: $toolOrchestrationVersion' -m 'Workflow: $workflowVersion' -m 'RestoreDB: $restoreDBVersion'"
								}
							}

							withCredentials([usernamePassword(credentialsId: 'codedx-build-github', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_TOKEN')]){

								sh('''
									git config --local credential.helper "!helper() { echo username=\\$GIT_USERNAME; echo password=\\$GIT_TOKEN; }; helper"
								''')

								script {
									if (hasDockerChanges) {

										// note: pipeline requires 'Suppress automatic SCM triggering' behavior
										sh "git push --set-upstream origin ${scm.branches[0]}"

										// Commit for Docker-related changes will alter next version number
										outputPreview = release.runSemanticRelease(GIT_TOKEN, true)
										nextVersion = release.getNextVersion(outputPreview)
									}

									chartTag = "charts-$nextVersion"
									setupScriptPath = './setup/core/setup.ps1'
								}

								sh "git tag $chartTag"

								// note: pipeline requires 'Suppress automatic SCM triggering' behavior
								sh "git push --set-upstream origin ${scm.branches[0]} --tags"

								sh "pwsh -command \"&{ . ./.version/common.ps1; Set-SetupScriptChartsReference '$setupScriptPath' '$chartTag' }\""
								sh "git add $setupScriptPath"
								sh "git commit -m 'chore: set chart reference to $chartTag'"

								// note: pipeline requires 'Suppress automatic SCM triggering' behavior
								sh "git push --set-upstream origin ${scm.branches[0]}"
							}
						}
					}
				}

				stage('Create Release') {

					steps {

						dir ('repo') {

							withCredentials([usernamePassword(credentialsId: 'codedx-build-github', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_TOKEN')]) {

								script {

									output = release.runSemanticRelease(GIT_TOKEN, false)
									versionReleased = release.getNextVersion(output)
									if (versionReleased != nextVersion) {
										error("Build failed because released version ($versionReleased) does not match expected version ($nextVersion)")
									}
								}
							}
						}
					}
				}			
			}

			post {
				success {
					script {
						slackSendMessage(true)
					}
				}
				failure {
					script {
						slackSendMessage(false)
					}
				}
			}
		}
	}
}

