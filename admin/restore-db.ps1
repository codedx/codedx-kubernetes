<#PSScriptInfo
.VERSION 1.4.0
.GUID 89d3b6a9-4f1b-4df9-8706-b6dbb7ec27b2
.AUTHOR Code Dx
#>

<# 
.DESCRIPTION 
This script automates the process of restoring the MariaDB master database with
a backup generated by a MariaDB slave database and reestablishes data replication.
#>


param (
	[string] $workDirectory = '~',
	[string] $backupToRestore,
	[string] $rootPwd,
	[string] $replicationPwd,
	[string] $namespaceCodeDx = 'cdx-app',
	[string] $releaseNameCodeDx = 'codedx',
	[int]    $waitSeconds = 600,
	[string] $imageDatabaseRestore = 'codedx/codedx-dbrestore:v1.4.0',
	[string] $dockerImagePullSecretName,
	[switch] $skipCodeDxRestart
)

$ErrorActionPreference = 'Stop'
$VerbosePreference = 'Continue'

Set-PSDebug -Strict

'../setup/core/common/mariadb.ps1','../setup/core/common/k8s.ps1','../setup/core/common/helm.ps1','../setup/core/common/velero.ps1','../setup/core/common/codedx.ps1' | ForEach-Object {
	$path = join-path $PSScriptRoot $_
	if (-not (Test-Path $path)) {
		Write-Error "Unable to find file script dependency at $path. Please download the entire codedx-kubernetes GitHub repository and rerun the downloaded copy of this script."
	}
	. $path
}

if (-not (Test-HelmRelease $namespaceCodeDx $releaseNameCodeDx)) {
	Write-Error "Unable to find Helm release named $releaseNameCodeDx in namespace $namespaceCodeDx."
}

$deploymentCodeDx = Get-CodeDxChartFullName $releaseNameCodeDx
$statefulSetMariaDBMaster = "$releaseNameCodeDx-mariadb-master"
$statefulSetMariaDBSlave = "$releaseNameCodeDx-mariadb-slave"
$mariaDbSecretName = "$releaseNameCodeDx-mariadb-pd"
$mariaDbMasterServiceName = "$releaseNameCodeDx-mariadb"

if (-not (Test-Deployment $namespaceCodeDx $deploymentCodeDx)) {
	Write-Error "Unable to find Deployment named $deploymentCodeDx in namespace $namespaceCodeDx."
}

if (-not (Test-StatefulSet $namespaceCodeDx $statefulSetMariaDBMaster)) {
	Write-Error "Unable to find StatefulSet named $statefulSetMariaDBMaster in namespace $namespaceCodeDx."
}

if (-not (Test-StatefulSet $namespaceCodeDx $statefulSetMariaDBSlave)) {
	Write-Error "Unable to find StatefulSet named $statefulSetMariaDBSlave in namespace $namespaceCodeDx."
}

if (-not (Test-Secret $namespaceCodeDx $mariaDbSecretName)) {
	Write-Error "Unable to find Secret named $mariaDbSecretName in namespace $namespaceCodeDx."
}

if (-not (Test-Service $namespaceCodeDx $mariaDbMasterServiceName)) {
	Write-Error "Unable to find Service named $mariaDbMasterServiceName in namespace $namespaceCodeDx."
}

$statefulSetMariaDBSlaveCount = (Get-HelmValues $namespaceCodeDx $releaseNameCodeDx).mariadb.slave.replicas

$mariaDBServiceAccount = Get-ServiceAccountName $namespaceCodeDx 'statefulset' $statefulSetMariaDBMaster

$deploymentBackupAnnotation = kubectl -n $namespaceCodeDx get deployment $deploymentCodeDx -o jsonpath='{.spec.template.metadata.annotations}'
$usingVeleroPlugin = $deploymentBackupAnnotation -match '\[backup.codedx.io/type:velero\]'

Write-Host @"

Using the following configuration:

Code Dx Deployment Name: $deploymentCodeDx
MariaDB Master StatefulSet Name: $statefulSetMariaDBMaster
MariaDB Slave StatefulSet Name: $statefulSetMariaDBSlave
MariaDB Slave Replica Count: $statefulSetMariaDBSlaveCount
MariaDB Secret Name: $mariaDbSecretName
MariaDB Master Service Name: $mariaDbMasterServiceName
MariaDB Service Account: $mariaDBServiceAccount
Using Velero Plug-in: $usingVeleroPlugin
"@

if ($backupToRestore -eq '') { 
	$backupToRestore = Read-HostText 'Enter the name of the db backup to restore' 1 
}

if ($rootPwd -eq '') { 
	$rootPwd = Read-HostSecureText 'Enter the password for the MariaDB root user' 1 
}

if ($replicationPwd -eq '') {
	$replicationPwd = Read-HostSecureText 'Enter the password for the MariaDB replication user' 1 
}

Write-Verbose "Testing for work directory '$workDirectory'"
if (-not (Test-Path $workDirectory -PathType Container)) {
	Write-Error "Unable to find specified directory ($workDirectory). Does it exist?"
}
$workDirectory = (Resolve-Path $workDirectory).path

$workDirectory = join-path $workDirectory 'backup-files'
Write-Verbose "Testing for directory at '$workDirectory'"
if (Test-Path $workDirectory -PathType Container) {
	Write-Error "Unable to continue because '$workDirectory' already exists. Rerun this script after either removing the directory or specifying a different -workDirectory parameter value."
}

if ($usingVeleroPlugin) {
	Write-Verbose 'Restarting database...'
	& (join-path $PSScriptRoot 'restart-db.ps1') -namespaceCodeDx $namespaceCodeDx -releaseNameCodeDx $releaseNameCodeDx -waitSeconds $waitSeconds
}

$backupDirectory = '/bitnami/mariadb/backup/data'
$restoreDirectory = '/bitnami/mariadb/restore'

Write-Verbose 'Searching for MariaDB slave pods...'
$podFullNamesSlaves = kubectl -n $namespaceCodeDx get pod -l component=slave -o name
if (0 -ne $LASTEXITCODE) {
	Write-Error "Unable to fetch slave pods, kubectl exited with exit code $LASTEXITCODE."
}

$podNamesSlaves = @()
if (Test-Path $backupToRestore -PathType Container) {

	Write-Verbose "Copying backup from '$backupToRestore' to '$workDirectory'..."
	Copy-Item -LiteralPath $backupToRestore -Destination $workDirectory -Recurse

	$podFullNamesSlaves | ForEach-Object {

		$podName = $_ -replace 'pod/',''
		$podNamesSlaves = $podNamesSlaves + $podName
	}
} else {

	Write-Verbose "Finding MariaDB slave pod containing backup named $backupToRestore..."
	$podNameBackupSlave = ''
	$podFullNamesSlaves | ForEach-Object {

		$podName = $_ -replace 'pod/',''
		$podNamesSlaves = $podNamesSlaves + $podName
		
		if ($podNameBackupSlave -eq '') {
			$backups = kubectl -n $namespaceCodeDx exec -c mariadb $podName -- ls $backupDirectory
			if (0 -eq $LASTEXITCODE) {
				if ($backups -contains $backupToRestore) {
					$podNameBackupSlave = $podName
					Write-Verbose "Found backup $backupToRestore in pod named $podNameBackupSlave..."
				}
			}
		}
	}
	if ('' -eq $podNameBackupSlave) {
		Write-Error "Backup '$backupToRestore' is neither a local directory path nor a backup from a subordinate MariaDB database."
	}

	Write-Verbose "Copying backup files from pod $podNameBackupSlave..."
	kubectl -n $namespaceCodeDx cp -c mariadb $podNameBackupSlave`:$backupDirectory/$backupToRestore $workDirectory
	if (0 -ne $LASTEXITCODE) {
		Write-Error "Unable to copy backup to $workDirectory, kubectl exited with exit code $LASTEXITCODE."
	}
}

if ((Get-ChildItem $workDirectory -ErrorAction Silent).Count -eq 0) {
	Write-Error "No files to restore were found in '$workDirectory'"
}

Write-Verbose 'Searching for Code Dx pods...'
$podNameCodeDx = kubectl -n $namespaceCodeDx get pod -l component=frontend -o name
if (0 -ne $LASTEXITCODE) {
	Write-Error "Unable to find Code Dx pod, kubectl exited with exit code $LASTEXITCODE."
}
$podNameCodeDx = $podNameCodeDx -replace 'pod/',''

Write-Verbose 'Searching for MariaDB master pod...'
$podNameMaster = kubectl -n $namespaceCodeDx get pod -l component=master -o name
if (0 -ne $LASTEXITCODE) {
	Write-Error "Unable to find MariaDB master pod, kubectl exited with exit code $LASTEXITCODE."
}
$podNameMaster = $podNameMaster -replace 'pod/',''

Write-Verbose "Stopping Code Dx deployment named $deploymentCodeDx..."
Set-DeploymentReplicas  $namespaceCodeDx $deploymentCodeDx 0 $waitSeconds

Write-Verbose "Copying backup files to master pod named $podNameMaster..."
Copy-DBBackupFiles $namespaceCodeDx $workDirectory $podNameMaster 'mariadb' $restoreDirectory
$podNamesSlaves | ForEach-Object {
	Write-Verbose "Copying backup files to slave pod named $podName..."
	Copy-DBBackupFiles $namespaceCodeDx $workDirectory $podName 'mariadb' $restoreDirectory
}

Write-Verbose 'Stopping slave database instances...'
$podNamesSlaves | ForEach-Object {
	Write-Verbose "Stopping slave named $podName..."
	Stop-SlaveDB $namespaceCodeDx $podName 'mariadb' $rootPwd
}

Write-Verbose "Stopping $statefulSetMariaDBMaster statefulset replica..."
Set-StatefulSetReplicas $namespaceCodeDx $statefulSetMariaDBMaster 0 $waitSeconds

Write-Verbose "Stopping $statefulSetMariaDBSlave statefulset replica(s)..."
Set-StatefulSetReplicas $namespaceCodeDx $statefulSetMariaDBSlave 0 $waitSeconds

Write-Verbose "Restoring database backup on pod $podNameMaster..."
Restore-DBBackup 'Master Restore' $waitSeconds $namespaceCodeDx $podNameMaster $mariaDbSecretName $mariaDBServiceAccount $imageDatabaseRestore $dockerImagePullSecretName
$podNamesSlaves | ForEach-Object {
	Write-Verbose "Restoring database backup on pod $_..."
	Restore-DBBackup "Slave Restore [$_]" $waitSeconds $namespaceCodeDx $_ $mariaDbSecretName $mariaDBServiceAccount $imageDatabaseRestore $dockerImagePullSecretName
}

Write-Verbose "Starting $statefulSetMariaDBMaster statefulset replica..."
Set-StatefulSetReplicas $namespaceCodeDx $statefulSetMariaDBMaster 1 $waitSeconds

Write-Verbose "Starting $statefulSetMariaDBSlave statefulset replica(s)..."
Set-StatefulSetReplicas $namespaceCodeDx $statefulSetMariaDBSlave $statefulSetMariaDBSlaveCount $waitSeconds

Write-Verbose 'Resetting master database...'
$filePos = Get-MasterFilePosAfterReset $namespaceCodeDx 'mariadb' $podNameMaster $rootPwd

Write-Verbose 'Connecting slave database(s)...'
$podNamesSlaves | ForEach-Object {
	Write-Verbose "Restoring slave database pod $_..."
	Start-SlaveDB $namespaceCodeDx $_ 'mariadb' 'replicator' $replicationPwd $rootPwd $mariaDbMasterServiceName $filePos
}

if ($skipCodeDxRestart) {
	Write-Verbose "Skipping Code Dx Restart..."
	Write-Verbose " To restart Code Dx, run: kubectl -n $namespaceCodeDx scale --replicas=1 deployment/$deploymentCodeDx"
} else {
	Write-Verbose "Starting Code Dx deployment named $deploymentCodeDx..."
	Set-DeploymentReplicas  $namespaceCodeDx $deploymentCodeDx 1 $waitSeconds
}

Write-Host 'Done'
