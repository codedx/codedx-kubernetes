apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "codedx-tool-orchestration.pre-delete-job" . | quote }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "codedx-tool-orchestration.commonLabels" . | nindent 4 }}
    component: hook
  annotations:
    "helm.sh/hook": pre-delete
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      labels:
        {{- include "codedx-tool-orchestration.commonLabels" . | nindent 8 }}
        component: hook
    spec:
      {{- if .Values.toolServiceImagePullSecrets }}
      imagePullSecrets:
      {{- toYaml .Values.toolServiceImagePullSecrets | nindent 6 }}
      {{- end }}
      serviceAccountName: {{ include "codedx-tool-orchestration.serviceAccountName" . | quote }}
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      {{- if .Values.nodeSelectors }}
      nodeSelector:
      {{- toYaml .Values.nodeSelectors | trim | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
      {{- toYaml .Values.tolerations | trim | nindent 8 }}
      {{- end }}
      restartPolicy: Never
      containers:
      - name: cleanup-projects-job
        image: "{{ required "imageNameHelmPreDelete is required" .Values.imageNameHelmPreDelete }}"
        command: ["/opt/codedx/cleanup/bin/cleanup"]
        args: ["-kubernetesNamespace", "{{ .Release.Namespace }}",
          "-logFile", "/opt/codedx/cleanup/logs/cleanup.log",
          "-logMaxSizeMB", "{{ .Values.logs.maxSizeMB }}",
          "-logMaxBackups", "{{ .Values.logs.maxBackups }}",
          "-storageEndpoint", {{ include "codedx-tool-orchestration.storageEndpoint" . }},
          "-storageTlsEnabled={{ include "codedx-tool-orchestration.storageTlsEnabled" . }}",
          "-storageBucket", {{ .Values.workflowStorage.bucketName | quote }},
          "-storageCredentialSecretName", {{ include "codedx-tool-orchestration.storageCredentialSecretName" . }},
          "-storageTlsConfigMapName", {{ include "codedx-tool-orchestration.storageTlsConfigMapName" . }},
          "-storageTlsConfigMapPublicCertName", {{ include "codedx-tool-orchestration.storageTlsConfigMapPublicCertName" . }},
          "-workDir", "/opt/codedx/cleanup/work"]
        volumeMounts:
        - name: storage-secret-volume
          mountPath: "/opt/codedx/cleanup/secrets/storageUsername"
          readOnly: true
          subPath: storageUsername
        - name: storage-secret-volume
          mountPath: "/opt/codedx/cleanup/secrets/storagePassword"
          readOnly: true
          subPath: storagePassword
        {{- if .Values.workflowStorage.configMapName }}
        - name: storage-cert-volume
          mountPath: /etc/ssl/certs/cdx-minio.pem
          subPath: cdx-minio.pem
          readOnly: true
        {{- end }}
        {{- if .Values.toolServiceTls.secret }}
        - name: tool-service-tls-volume
          mountPath: "/opt/codedx/cleanup/tls"
        {{- end }}
      volumes:
      - name: storage-secret-volume
        secret:
          secretName: {{ .Values.minio.global.minio.existingSecret | quote }}
          items:
          - key: access-key
            path: storageUsername
          - key: secret-key
            path: storagePassword
      {{- if .Values.workflowStorage.configMapName }}
      - name: storage-cert-volume
        configMap:
          name: {{ .Values.workflowStorage.configMapName }}
          items:
            - key: {{ .Values.workflowStorage.configMapPublicCertKeyName }}
              path: cdx-minio.pem
      {{- end }}
      {{- if .Values.toolServiceTls.secret }}
      - name: tool-service-tls-volume
        secret:
          secretName: {{ .Values.toolServiceTls.secret }}
      {{- end }}
